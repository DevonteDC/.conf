#!/usr/bin/env coffee
Profiles =
  strider:
    env_args:
      SERVER_NAME: 'url'
      PLUGIN_GITHUB_APP_ID: "ghid"
      PLUGIN_GITHUB_APP_SECRET: "ghsecret"
    command: "node-dev"
    args: ['bin/strider']

echo = console.log
echo2 = (str) -> process.stderr.write "#{str}\n"
argv = require('minimist')(process.argv.slice(2))
path = require 'path'
_ = require 'lodash'

help = """
  Helps you switch into hacking contexts on various projects.

  Define projects in #{__filename}

  Usage: #{path.basename(__filename)} [switches]
    -S  => spawn the process
    -A  => print arguments
    -h  => print this help screen
"""

options =
  spawn: argv.S? || argv.spawn
  print_argv: argv.A?
  print_help: argv.h or argv.help or argv._[0] is "help"

if options.print_argv
  echo "argv =", argv
  echo "options =", options
  echo ''

if options.print_help
  echo help
  process.exit(1)

class Project
  constructor: (name) ->
    @profile = Profiles[name]
    unless @profile
      echo2 "no profile defined for '#{name}' -- you can define one in #{__filename}"
      process.exit(1)

  hack_cmd: ->
    new HackCommand(@profile)

class HackCommand
  constructor: (profile) ->
    @command = profile.command
    @args = profile.args
    @env = {}
    env_args = profile.env_args
    env_defaults = profile.env_defaults
    if env_defaults?
      for name, value of env_defaults
        @env[name] = value
    if env_args?
      for name, arg of env_args
        value = argv[arg]
        if value?
          @env[name] = value
        else
          echo2 "To set #{name} pass in --#{arg}"
          
  execString: ->
    "#{@command} #{@args.join(' ')}"

  toString: ->
    lines = []
    for name, value of @env
      lines.push "#{name}=\"#{value}\""
    lines.push(@execString())
    lines.join(" \\\n")


projectName = argv.project or path.basename(process.cwd())
project = new Project(projectName)
cmd = project.hack_cmd()
echo2 "\nWriting pipeable command to STDOUT\n"
echo cmd.toString()
if options.spawn
  echo2 "\nExec'ing for you...\n"
  cp = require('child_process')
  env = _.assign({}, cmd.env, process.env)
  proc = cp.spawn(cmd.command, cmd.args, { env: env })
  proc.stdout.on 'data', (chunk) -> process.stdout.write chunk.toString()
  proc.stderr.on 'data', (chunk) -> process.stdout.write chunk.toString()
